{
  "version": 3,
  "file": "ng2-dual-list-box.umd.min.js",
  "sources": [
    "ng://ng2-dual-list-box/node_modules/tslib/tslib.es6.js",
    "ng://ng2-dual-list-box/out/src/dual-list-box.component.ts",
    "ng://ng2-dual-list-box/out/src/array.pipes.ts",
    "ng://ng2-dual-list-box/out/src/index.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}",
    "import { Component, Input, Output, EventEmitter, OnInit, forwardRef } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/distinctUntilChanged';\r\nimport 'rxjs/add/operator/map';\r\nconst intersectionwith = require('lodash.intersectionwith');\r\nconst differenceWith = require('lodash.differencewith');\r\n\r\nimport { IItemsMovedEvent, IListBoxItem } from './models';\r\n\r\n@Component({\r\n    selector: 'ng2-dual-list-box',\r\n    template: `<div class=\"row\" [formGroup]=\"listBoxForm\">\r\n    <div class=\"col-md-5 col-lg-5 col-sm-12\">\r\n        <h4 class=\"text-center vertical-spacing-5\">{{availableText}}</h4>\r\n        <input type=\"text\" class=\"form-control vertical-spacing-5\" placeholder=\"{{availableFilterPlaceholder}}\"\r\n               formControlName=\"availableSearchInput\" />\r\n        <select class=\"form-control list-box\" formControlName=\"availableListBox\" multiple>\r\n            <option *ngFor=\"let item of availableItems | arrayFilter:['text', searchTermAvailable] | arraySort:['text', 'ASC'];trackBy:trackByValue\"\r\n                    [value]=\"item?.value\"\r\n                    (dblclick)=\"moveAvailableItemToSelected(item)\">{{item?.text}}</option>\r\n        </select>\r\n    </div>\r\n    <div class=\"col-md-2 col-lg-2 col-sm-12 center-block text-center\">\r\n        <button type=\"button\"\r\n                class=\"btn btn-default col-md-8 col-md-offset-2 atr top80 sm-spacing\"\r\n                *ngIf=\"moveAllButton\" (click)=\"moveAllItemsToSelected()\">\r\n            <span class=\"glyphicon glyphicon-list\"></span>\r\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\r\n        </button>\r\n        <button type=\"button\"\r\n                class=\"btn btn-default col-md-8 col-md-offset-2 str vertical-spacing-5 sm-spacing\"\r\n                [disabled]=\"!availableListBoxControl.value?.length\"\r\n                (click)=\"moveMarkedAvailableItemsToSelected()\">\r\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\r\n        </button>\r\n        <button type=\"button\"\r\n                class=\"btn btn-default col-md-8 col-md-offset-2 stl vertical-spacing-5 sm-spacing\"\r\n                [disabled]=\"!selectedListBoxControl.value?.length\"\r\n                (click)=\"moveMarkedSelectedItemsToAvailable()\">\r\n            <span class=\"glyphicon glyphicon-chevron-left\"></span>\r\n        </button>\r\n        <button type=\"button\"\r\n                class=\"btn btn-default col-md-8 col-md-offset-2 atl bottom10 sm-spacing\"\r\n                *ngIf=\"moveAllButton\" (click)=\"moveAllItemsToAvailable()\">\r\n            <span class=\"glyphicon glyphicon-chevron-left\"></span>\r\n            <span class=\"glyphicon glyphicon-list\"></span>\r\n        </button>\r\n    </div>\r\n    <div class=\"col-md-5 col-lg-5 col-sm-12\">\r\n        <h4 class=\"text-center vertical-spacing-5\">{{selectedText}}</h4>\r\n        <input type=\"text\" class=\"form-control vertical-spacing-5\" placeholder=\"{{selectedFilterPlaceholder}}\"\r\n               formControlName=\"selectedSearchInput\" />\r\n        <select class=\"form-control list-box\" formControlName=\"selectedListBox\" multiple>\r\n            <option *ngFor=\"let item of selectedItems | arrayFilter:['text', searchTermSelected] | arraySort:['text', 'ASC'];trackBy:trackByValue\"\r\n                    [value]=\"item?.value\"\r\n                    (dblclick)=\"moveSelectedItemToAvailable(item)\">{{item?.text}}</option>\r\n        </select>\r\n    </div>\r\n</div>`,\r\n    styles: [`.list-box{\r\n    min-height:200px;\r\n    width:100%;\r\n}\r\n.top100{\r\n    margin-top:100px;\r\n}\r\n.top80{\r\n    margin-top:80px;\r\n}\r\n.bottom10{\r\n    margin-bottom:10px;\r\n}\r\n.vertical-spacing-5{\r\n    margin-top:5px;\r\n    margin-bottom:5px;\r\n}\r\n.center-block{\r\n    min-height:50px;\r\n}\r\n@media only screen and (max-width : 768px){\r\n    .sm-spacing{\r\n        margin-top:10px;\r\n        margin-bottom:10px;\r\n    }\r\n}\r\n@media only screen and (min-width : 768px) and (max-width : 992px){\r\n    .sm-spacing{\r\n        margin-top:10px;\r\n        margin-bottom:10px;\r\n    }\r\n} \r\n@media only screen and (max-width : 480px){\r\n    .sm-spacing{\r\n        margin-top:10px;\r\n        margin-bottom:10px;\r\n    }\r\n}`],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => DualListBoxComponent),\r\n        multi: true\r\n    }]\r\n})\r\nexport class DualListBoxComponent implements OnInit, ControlValueAccessor {\r\n\r\n    // array of items to display in left box\r\n    @Input() set data(items: Array<{}>) {\r\n        this.availableItems = [...(items || []).map((item: {}, index: number) => ({\r\n            value: item[this.valueField].toString(),\r\n            text: item[this.textField]\r\n        }))];\r\n    };\r\n    // input to set search term for available list box from the outside\r\n    @Input() set availableSearch(searchTerm: string) {\r\n        this.searchTermAvailable = searchTerm;\r\n        this.availableSearchInputControl.setValue(searchTerm);\r\n    };\r\n    // input to set search term for selected list box from the outside\r\n    @Input() set selectedSearch(searchTerm: string) {\r\n        this.searchTermSelected = searchTerm;\r\n        this.selectedSearchInputControl.setValue(searchTerm);\r\n    };\r\n    // field to use for value of option\r\n    @Input() valueField = 'id';\r\n    // field to use for displaying option text\r\n    @Input() textField = 'name';\r\n    // text to display as title above component\r\n    @Input() title: string;\r\n    // time to debounce search output in ms\r\n    @Input() debounceTime = 500;\r\n    // show/hide button to move all items between boxes\r\n    @Input() moveAllButton = true;\r\n    // text displayed over the available items list box\r\n    @Input() availableText = 'Available items';\r\n    // text displayed over the selected items list box\r\n    @Input() selectedText = 'Selected items';\r\n    // set placeholder text in available items list box\r\n    @Input() availableFilterPlaceholder= 'Filter...';\r\n    // set placeholder text in selected items list box\r\n    @Input() selectedFilterPlaceholder = 'Filter...';\r\n\r\n    // event called when item or items from available items(left box) is selected\r\n    @Output() onAvailableItemSelected: EventEmitter<{} | Array<{}>> = new EventEmitter<{} | Array<{}>>();\r\n    // event called when item or items from selected items(right box) is selected\r\n    @Output() onSelectedItemsSelected: EventEmitter<{} | Array<{}>> = new EventEmitter<{} | Array<{}>>();\r\n    // event called when items are moved between boxes, returns state of both boxes and item moved\r\n    @Output() onItemsMoved: EventEmitter<IItemsMovedEvent> = new EventEmitter<IItemsMovedEvent>();\r\n\r\n    // private variables to manage class\r\n    searchTermAvailable = '';\r\n    searchTermSelected = '';\r\n    availableItems: Array<IListBoxItem> = [];\r\n    selectedItems: Array<IListBoxItem> = [];\r\n    listBoxForm: FormGroup;\r\n    availableListBoxControl: FormControl = new FormControl();\r\n    selectedListBoxControl: FormControl = new FormControl();\r\n    availableSearchInputControl: FormControl = new FormControl();\r\n    selectedSearchInputControl: FormControl = new FormControl();\r\n\r\n    // control value accessors\r\n    _onChange = (_: any) => { };\r\n    _onTouched = () => { };\r\n\r\n    constructor(public fb: FormBuilder) {\r\n\r\n        this.listBoxForm = this.fb.group({\r\n            availableListBox: this.availableListBoxControl,\r\n            selectedListBox: this.selectedListBoxControl,\r\n            availableSearchInput: this.availableSearchInputControl,\r\n            selectedSearchInput: this.selectedSearchInputControl\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.availableListBoxControl\r\n            .valueChanges\r\n            .subscribe((items: Array<{}>) => this.onAvailableItemSelected.emit(items));\r\n        this.selectedListBoxControl\r\n            .valueChanges\r\n            .subscribe((items: Array<{}>) => this.onSelectedItemsSelected.emit(items));\r\n        this.availableSearchInputControl\r\n            .valueChanges\r\n            .debounceTime(this.debounceTime)\r\n            .distinctUntilChanged()\r\n            .subscribe((search: string) => this.searchTermAvailable = search);\r\n        this.selectedSearchInputControl\r\n            .valueChanges\r\n            .debounceTime(this.debounceTime)\r\n            .distinctUntilChanged()\r\n            .subscribe((search: string) => this.searchTermSelected = search);\r\n    }\r\n\r\n    /**\r\n     * Move all items from available to selected\r\n     */\r\n    moveAllItemsToSelected(): void {\r\n\r\n        if (!this.availableItems.length) {\r\n            return;\r\n        }\r\n        this.selectedItems = [...this.selectedItems, ...this.availableItems];\r\n        this.availableItems = [];\r\n        this.onItemsMoved.emit({\r\n            available: this.availableItems,\r\n            selected: this.selectedItems,\r\n            movedItems: this.availableListBoxControl.value,\r\n            from: 'available',\r\n            to: 'selected'\r\n        });\r\n        this.availableListBoxControl.setValue([]);\r\n        this.writeValue(this.getValues());\r\n    }\r\n\r\n    /**\r\n     * Move all items from selected to available\r\n     */\r\n    moveAllItemsToAvailable(): void {\r\n\r\n        if (!this.selectedItems.length) {\r\n            return;\r\n        }\r\n        this.availableItems = [...this.availableItems, ...this.selectedItems];\r\n        this.selectedItems = [];\r\n        this.onItemsMoved.emit({\r\n            available: this.availableItems,\r\n            selected: this.selectedItems,\r\n            movedItems: this.selectedListBoxControl.value,\r\n            from: 'selected',\r\n            to: 'available'\r\n        });\r\n        this.selectedListBoxControl.setValue([]);\r\n        this.writeValue([]);\r\n    }\r\n\r\n    /**\r\n     * Move marked items from available items to selected items\r\n     */\r\n    moveMarkedAvailableItemsToSelected(): void {\r\n\r\n        // first move items to selected\r\n        this.selectedItems = [...this.selectedItems,\r\n            ...intersectionwith(this.availableItems, this.availableListBoxControl.value,\r\n                (item: IListBoxItem, value: string) => item.value === value)];\r\n        // now filter available items to not include marked values\r\n        this.availableItems = [...differenceWith(this.availableItems, this.availableListBoxControl.value,\r\n            (item: IListBoxItem, value: string) => item.value === value)];\r\n        // clear marked available items and emit event\r\n        this.onItemsMoved.emit({\r\n            available: this.availableItems,\r\n            selected: this.selectedItems,\r\n            movedItems: this.availableListBoxControl.value,\r\n            from: 'available',\r\n            to: 'selected'\r\n        });\r\n        this.availableListBoxControl.setValue([]);\r\n        this.availableSearchInputControl.setValue('');\r\n        this.writeValue(this.getValues());\r\n    }\r\n\r\n    /**\r\n     * Move marked items from selected items to available items\r\n     */\r\n    moveMarkedSelectedItemsToAvailable(): void {\r\n\r\n        // first move items to available\r\n        this.availableItems = [...this.availableItems,\r\n            ...intersectionwith(this.selectedItems, this.selectedListBoxControl.value,\r\n                (item: IListBoxItem, value: string) => item.value === value)];\r\n        // now filter available items to not include marked values\r\n        this.selectedItems = [...differenceWith(this.selectedItems, this.selectedListBoxControl.value,\r\n            (item: IListBoxItem, value: string) => item.value === value)];\r\n        // clear marked available items and emit event\r\n        this.onItemsMoved.emit({\r\n            available: this.availableItems,\r\n            selected: this.selectedItems,\r\n            movedItems: this.selectedListBoxControl.value,\r\n            from: 'selected',\r\n            to: 'available'\r\n        });\r\n        this.selectedListBoxControl.setValue([]);\r\n        this.selectedSearchInputControl.setValue('');\r\n        this.writeValue(this.getValues());\r\n    }\r\n\r\n    /**\r\n     * Move single item from available to selected\r\n     * @param item\r\n     */\r\n    moveAvailableItemToSelected(item: IListBoxItem): void {\r\n\r\n        this.availableItems = this.availableItems.filter((listItem: IListBoxItem) => listItem.value !== item.value);\r\n        this.selectedItems = [...this.selectedItems, item];\r\n        this.onItemsMoved.emit({\r\n            available: this.availableItems,\r\n            selected: this.selectedItems,\r\n            movedItems: [item.value],\r\n            from: 'available',\r\n            to: 'selected'\r\n        });\r\n        this.availableSearchInputControl.setValue('');\r\n        this.availableListBoxControl.setValue([]);\r\n        this.writeValue(this.getValues());\r\n    }\r\n\r\n    /**\r\n     * Move single item from selected to available\r\n     * @param item\r\n     */\r\n    moveSelectedItemToAvailable(item: IListBoxItem): void {\r\n\r\n        this.selectedItems = this.selectedItems.filter((listItem: IListBoxItem) => listItem.value !== item.value);\r\n        this.availableItems = [...this.availableItems, item];\r\n        this.onItemsMoved.emit({\r\n            available: this.availableItems,\r\n            selected: this.selectedItems,\r\n            movedItems: [item.value],\r\n            from: 'selected',\r\n            to: 'available'\r\n        });\r\n        this.selectedSearchInputControl.setValue('');\r\n        this.selectedListBoxControl.setValue([]);\r\n        this.writeValue(this.getValues());\r\n    }\r\n\r\n    /**\r\n     * Function to pass to ngFor to improve performance, tracks items\r\n     * by the value field\r\n     * @param index\r\n     * @param item\r\n     */\r\n    trackByValue(index: number, item: {}): string {\r\n        return item[this.valueField];\r\n    }\r\n\r\n    /* Methods from ControlValueAccessor interface, required for ngModel and formControlName - begin */\r\n    writeValue(value: any): void {\r\n        if (this.selectedItems && value && value.length > 0) {\r\n            this.selectedItems = [...this.selectedItems,\r\n                ...intersectionwith(this.availableItems, value, (item: IListBoxItem, val: string) => item.value === val)];\r\n            this.availableItems = [...differenceWith(this.availableItems, value,\r\n                (item: IListBoxItem, val: string) => item.value === val)];\r\n        }\r\n        this._onChange(value);\r\n    }\r\n\r\n    registerOnChange(fn: (_: any) => {}): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => {}): void {\r\n        this._onTouched = fn;\r\n    }\r\n    /* Methods from ControlValueAccessor interface, required for ngModel and formControlName - end */\r\n\r\n    /**\r\n     * Utility method to get values from\r\n     * selected items\r\n     */\r\n    private getValues(): string[] {\r\n        return (this.selectedItems || []).map((item: IListBoxItem) => item.value);\r\n    }\r\n}\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\nconst orderby = require('lodash.orderby');\r\n\r\n/**\r\n * Utility class to not hardcode sort directions\r\n */\r\nexport class SortOptions {\r\n    /**\r\n     * Static property to defined ASC and DESC values\r\n     * to avoid hardcoding and repeating\r\n     * replaces string enums\r\n     */\r\n    static direction: {\r\n        ASC: string,\r\n        DESC: string\r\n    } = {\r\n        ASC: 'ASC',\r\n        DESC: 'DESC'\r\n    };\r\n}\r\n\r\n/**\r\n * Pipe used to sort arrays by using lodash\r\n * Takes array and array of 2 strings(parameters), key and direction\r\n * direction must be either ASC or DESC\r\n */\r\n@Pipe({\r\n    name: 'arraySort'\r\n})\r\nexport class ArraySortPipe implements PipeTransform {\r\n\r\n    transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\r\n\r\n        array = array || [];\r\n\r\n        if (typeof args === 'undefined' || args.length !== 2) {\r\n            return array;\r\n        }\r\n\r\n        const [key, direction] = args;\r\n\r\n        if (direction !== SortOptions.direction.ASC && direction !== SortOptions.direction.DESC) {\r\n            return array;\r\n        }\r\n\r\n        // if there is no key we assume item is of string type\r\n        return orderby(array, (item: {} | string) => item.hasOwnProperty(key) ? item[key] : item, direction.toLowerCase());\r\n    }\r\n}\r\n\r\n/**\r\n * Pipe used to filter array, takes input array and\r\n * array of 2 arguments, key of object and search term\r\n * if key does not exist, pipe assumes the item is string\r\n */\r\n@Pipe({\r\n    name: 'arrayFilter'\r\n})\r\nexport class ArrayFilterPipe implements PipeTransform {\r\n\r\n    transform(array: Array<{}>, args: string[]): Array<string> | Array<{}> {\r\n\r\n        array = array || [];\r\n\r\n        if (typeof args === 'undefined' || args.length !== 2 ) {\r\n            return array;\r\n        }\r\n\r\n        const [key, searchTerm] = args;\r\n\r\n        if (searchTerm.trim() === '') {\r\n            return array;\r\n        }\r\n\r\n        return array.filter((item: {}) => item[key].toString().toLowerCase().search(searchTerm.toLowerCase().trim()) >= 0);\r\n    }\r\n}\r\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { DualListBoxComponent } from './dual-list-box.component';\r\nimport { ArraySortPipe, ArrayFilterPipe } from './array.pipes';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [\r\n    ArraySortPipe,\r\n    ArrayFilterPipe,\r\n    DualListBoxComponent\r\n  ],\r\n  exports: [\r\n    ArraySortPipe,\r\n    ArrayFilterPipe,\r\n    DualListBoxComponent\r\n  ]\r\n})\r\nexport class DualListBoxModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: DualListBoxModule\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "e",
    "i",
    "call",
    "ar",
    "next",
    "done",
    "push",
    "value",
    "error",
    "__spread",
    "arguments",
    "length",
    "concat",
    "intersectionwith",
    "require",
    "differenceWith",
    "DualListBoxComponent",
    "fb",
    "this",
    "valueField",
    "textField",
    "debounceTime",
    "moveAllButton",
    "availableText",
    "selectedText",
    "availableFilterPlaceholder",
    "selectedFilterPlaceholder",
    "onAvailableItemSelected",
    "EventEmitter",
    "onSelectedItemsSelected",
    "onItemsMoved",
    "searchTermAvailable",
    "searchTermSelected",
    "availableItems",
    "selectedItems",
    "availableListBoxControl",
    "FormControl",
    "selectedListBoxControl",
    "availableSearchInputControl",
    "selectedSearchInputControl",
    "_onChange",
    "_",
    "_onTouched",
    "listBoxForm",
    "group",
    "availableListBox",
    "selectedListBox",
    "availableSearchInput",
    "selectedSearchInput",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "items",
    "_this",
    "map",
    "item",
    "index",
    "toString",
    "text",
    "searchTerm",
    "setValue",
    "ngOnInit",
    "valueChanges",
    "subscribe",
    "emit",
    "distinctUntilChanged",
    "search",
    "moveAllItemsToSelected",
    "available",
    "selected",
    "movedItems",
    "from",
    "to",
    "writeValue",
    "getValues",
    "moveAllItemsToAvailable",
    "moveMarkedAvailableItemsToSelected",
    "moveMarkedSelectedItemsToAvailable",
    "moveAvailableItemToSelected",
    "filter",
    "listItem",
    "moveSelectedItemToAvailable",
    "trackByValue",
    "val",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "FormBuilder",
    "data",
    "Input",
    "availableSearch",
    "selectedSearch",
    "title",
    "Output",
    "orderby",
    "SortOptions",
    "direction",
    "ASC",
    "DESC",
    "ArraySortPipe",
    "transform",
    "array",
    "_a",
    "key",
    "hasOwnProperty",
    "toLowerCase",
    "Pipe",
    "name",
    "ArrayFilterPipe",
    "trim",
    "DualListBoxModule",
    "forRoot",
    "ngModule",
    "NgModule",
    "imports",
    "CommonModule",
    "ReactiveFormsModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
