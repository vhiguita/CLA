import { __spread, __read } from 'tslib';
import { Component, Input, Output, EventEmitter, forwardRef, Pipe, NgModule } from '@angular/core';
import { FormBuilder, FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/map';
import { CommonModule } from '@angular/common';

var intersectionwith = require('lodash.intersectionwith');
var differenceWith = require('lodash.differencewith');
var DualListBoxComponent = /** @class */ (function () {
    function DualListBoxComponent(fb) {
        this.fb = fb;
        this.valueField = 'id';
        this.textField = 'name';
        this.debounceTime = 500;
        this.moveAllButton = true;
        this.availableText = 'Available items';
        this.selectedText = 'Selected items';
        this.availableFilterPlaceholder = 'Filter...';
        this.selectedFilterPlaceholder = 'Filter...';
        this.onAvailableItemSelected = new EventEmitter();
        this.onSelectedItemsSelected = new EventEmitter();
        this.onItemsMoved = new EventEmitter();
        this.searchTermAvailable = '';
        this.searchTermSelected = '';
        this.availableItems = [];
        this.selectedItems = [];
        this.availableListBoxControl = new FormControl();
        this.selectedListBoxControl = new FormControl();
        this.availableSearchInputControl = new FormControl();
        this.selectedSearchInputControl = new FormControl();
        this._onChange = function (_) { };
        this._onTouched = function () { };
        this.listBoxForm = this.fb.group({
            availableListBox: this.availableListBoxControl,
            selectedListBox: this.selectedListBoxControl,
            availableSearchInput: this.availableSearchInputControl,
            selectedSearchInput: this.selectedSearchInputControl
        });
    }
    Object.defineProperty(DualListBoxComponent.prototype, "data", {
        set: function (items) {
            var _this = this;
            this.availableItems = __spread((items || []).map(function (item, index) { return ({
                value: item[_this.valueField].toString(),
                text: item[_this.textField]
            }); }));
        },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(DualListBoxComponent.prototype, "availableSearch", {
        set: function (searchTerm) {
            this.searchTermAvailable = searchTerm;
            this.availableSearchInputControl.setValue(searchTerm);
        },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(DualListBoxComponent.prototype, "selectedSearch", {
        set: function (searchTerm) {
            this.searchTermSelected = searchTerm;
            this.selectedSearchInputControl.setValue(searchTerm);
        },
        enumerable: true,
        configurable: true
    });
    
    DualListBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.availableListBoxControl
            .valueChanges
            .subscribe(function (items) { return _this.onAvailableItemSelected.emit(items); });
        this.selectedListBoxControl
            .valueChanges
            .subscribe(function (items) { return _this.onSelectedItemsSelected.emit(items); });
        this.availableSearchInputControl
            .valueChanges
            .debounceTime(this.debounceTime)
            .distinctUntilChanged()
            .subscribe(function (search) { return _this.searchTermAvailable = search; });
        this.selectedSearchInputControl
            .valueChanges
            .debounceTime(this.debounceTime)
            .distinctUntilChanged()
            .subscribe(function (search) { return _this.searchTermSelected = search; });
    };
    DualListBoxComponent.prototype.moveAllItemsToSelected = function () {
        if (!this.availableItems.length) {
            return;
        }
        this.selectedItems = __spread(this.selectedItems, this.availableItems);
        this.availableItems = [];
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.availableListBoxControl.value,
            from: 'available',
            to: 'selected'
        });
        this.availableListBoxControl.setValue([]);
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveAllItemsToAvailable = function () {
        if (!this.selectedItems.length) {
            return;
        }
        this.availableItems = __spread(this.availableItems, this.selectedItems);
        this.selectedItems = [];
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.selectedListBoxControl.value,
            from: 'selected',
            to: 'available'
        });
        this.selectedListBoxControl.setValue([]);
        this.writeValue([]);
    };
    DualListBoxComponent.prototype.moveMarkedAvailableItemsToSelected = function () {
        this.selectedItems = __spread(this.selectedItems, intersectionwith(this.availableItems, this.availableListBoxControl.value, function (item, value) { return item.value === value; }));
        this.availableItems = __spread(differenceWith(this.availableItems, this.availableListBoxControl.value, function (item, value) { return item.value === value; }));
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.availableListBoxControl.value,
            from: 'available',
            to: 'selected'
        });
        this.availableListBoxControl.setValue([]);
        this.availableSearchInputControl.setValue('');
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveMarkedSelectedItemsToAvailable = function () {
        this.availableItems = __spread(this.availableItems, intersectionwith(this.selectedItems, this.selectedListBoxControl.value, function (item, value) { return item.value === value; }));
        this.selectedItems = __spread(differenceWith(this.selectedItems, this.selectedListBoxControl.value, function (item, value) { return item.value === value; }));
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.selectedListBoxControl.value,
            from: 'selected',
            to: 'available'
        });
        this.selectedListBoxControl.setValue([]);
        this.selectedSearchInputControl.setValue('');
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveAvailableItemToSelected = function (item) {
        this.availableItems = this.availableItems.filter(function (listItem) { return listItem.value !== item.value; });
        this.selectedItems = __spread(this.selectedItems, [item]);
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: [item.value],
            from: 'available',
            to: 'selected'
        });
        this.availableSearchInputControl.setValue('');
        this.availableListBoxControl.setValue([]);
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveSelectedItemToAvailable = function (item) {
        this.selectedItems = this.selectedItems.filter(function (listItem) { return listItem.value !== item.value; });
        this.availableItems = __spread(this.availableItems, [item]);
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: [item.value],
            from: 'selected',
            to: 'available'
        });
        this.selectedSearchInputControl.setValue('');
        this.selectedListBoxControl.setValue([]);
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.trackByValue = function (index, item) {
        return item[this.valueField];
    };
    DualListBoxComponent.prototype.writeValue = function (value) {
        if (this.selectedItems && value && value.length > 0) {
            this.selectedItems = __spread(this.selectedItems, intersectionwith(this.availableItems, value, function (item, val) { return item.value === val; }));
            this.availableItems = __spread(differenceWith(this.availableItems, value, function (item, val) { return item.value === val; }));
        }
        this._onChange(value);
    };
    DualListBoxComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    DualListBoxComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    DualListBoxComponent.prototype.getValues = function () {
        return (this.selectedItems || []).map(function (item) { return item.value; });
    };
    return DualListBoxComponent;
}());
DualListBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng2-dual-list-box',
                template: "<div class=\"row\" [formGroup]=\"listBoxForm\">\n    <div class=\"col-md-5 col-lg-5 col-sm-12\">\n        <h4 class=\"text-center vertical-spacing-5\">{{availableText}}</h4>\n        <input type=\"text\" class=\"form-control vertical-spacing-5\" placeholder=\"{{availableFilterPlaceholder}}\"\n               formControlName=\"availableSearchInput\" />\n        <select class=\"form-control list-box\" formControlName=\"availableListBox\" multiple>\n            <option *ngFor=\"let item of availableItems | arrayFilter:['text', searchTermAvailable] | arraySort:['text', 'ASC'];trackBy:trackByValue\"\n                    [value]=\"item?.value\"\n                    (dblclick)=\"moveAvailableItemToSelected(item)\">{{item?.text}}</option>\n        </select>\n    </div>\n    <div class=\"col-md-2 col-lg-2 col-sm-12 center-block text-center\">\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 atr top80 sm-spacing\"\n                *ngIf=\"moveAllButton\" (click)=\"moveAllItemsToSelected()\">\n            <span class=\"glyphicon glyphicon-list\"></span>\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 str vertical-spacing-5 sm-spacing\"\n                [disabled]=\"!availableListBoxControl.value?.length\"\n                (click)=\"moveMarkedAvailableItemsToSelected()\">\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 stl vertical-spacing-5 sm-spacing\"\n                [disabled]=\"!selectedListBoxControl.value?.length\"\n                (click)=\"moveMarkedSelectedItemsToAvailable()\">\n            <span class=\"glyphicon glyphicon-chevron-left\"></span>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 atl bottom10 sm-spacing\"\n                *ngIf=\"moveAllButton\" (click)=\"moveAllItemsToAvailable()\">\n            <span class=\"glyphicon glyphicon-chevron-left\"></span>\n            <span class=\"glyphicon glyphicon-list\"></span>\n        </button>\n    </div>\n    <div class=\"col-md-5 col-lg-5 col-sm-12\">\n        <h4 class=\"text-center vertical-spacing-5\">{{selectedText}}</h4>\n        <input type=\"text\" class=\"form-control vertical-spacing-5\" placeholder=\"{{selectedFilterPlaceholder}}\"\n               formControlName=\"selectedSearchInput\" />\n        <select class=\"form-control list-box\" formControlName=\"selectedListBox\" multiple>\n            <option *ngFor=\"let item of selectedItems | arrayFilter:['text', searchTermSelected] | arraySort:['text', 'ASC'];trackBy:trackByValue\"\n                    [value]=\"item?.value\"\n                    (dblclick)=\"moveSelectedItemToAvailable(item)\">{{item?.text}}</option>\n        </select>\n    </div>\n</div>",
                styles: [".list-box{\n    min-height:200px;\n    width:100%;\n}\n.top100{\n    margin-top:100px;\n}\n.top80{\n    margin-top:80px;\n}\n.bottom10{\n    margin-bottom:10px;\n}\n.vertical-spacing-5{\n    margin-top:5px;\n    margin-bottom:5px;\n}\n.center-block{\n    min-height:50px;\n}\n@media only screen and (max-width : 768px){\n    .sm-spacing{\n        margin-top:10px;\n        margin-bottom:10px;\n    }\n}\n@media only screen and (min-width : 768px) and (max-width : 992px){\n    .sm-spacing{\n        margin-top:10px;\n        margin-bottom:10px;\n    }\n}\n@media only screen and (max-width : 480px){\n    .sm-spacing{\n        margin-top:10px;\n        margin-bottom:10px;\n    }\n}"],
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return DualListBoxComponent; }),
                        multi: true
                    }]
            },] },
];
DualListBoxComponent.ctorParameters = function () { return [
    { type: FormBuilder, },
]; };
DualListBoxComponent.propDecorators = {
    "data": [{ type: Input },],
    "availableSearch": [{ type: Input },],
    "selectedSearch": [{ type: Input },],
    "valueField": [{ type: Input },],
    "textField": [{ type: Input },],
    "title": [{ type: Input },],
    "debounceTime": [{ type: Input },],
    "moveAllButton": [{ type: Input },],
    "availableText": [{ type: Input },],
    "selectedText": [{ type: Input },],
    "availableFilterPlaceholder": [{ type: Input },],
    "selectedFilterPlaceholder": [{ type: Input },],
    "onAvailableItemSelected": [{ type: Output },],
    "onSelectedItemsSelected": [{ type: Output },],
    "onItemsMoved": [{ type: Output },],
};
var orderby = require('lodash.orderby');
var SortOptions = /** @class */ (function () {
    function SortOptions() {
    }
    return SortOptions;
}());
SortOptions.direction = {
    ASC: 'ASC',
    DESC: 'DESC'
};
var ArraySortPipe = /** @class */ (function () {
    function ArraySortPipe() {
    }
    ArraySortPipe.prototype.transform = function (array, args) {
        array = array || [];
        if (typeof args === 'undefined' || args.length !== 2) {
            return array;
        }
        var _a = __read(args, 2), key = _a[0], direction = _a[1];
        if (direction !== SortOptions.direction.ASC && direction !== SortOptions.direction.DESC) {
            return array;
        }
        return orderby(array, function (item) { return item.hasOwnProperty(key) ? item[key] : item; }, direction.toLowerCase());
    };
    return ArraySortPipe;
}());
ArraySortPipe.decorators = [
    { type: Pipe, args: [{
                name: 'arraySort'
            },] },
];
ArraySortPipe.ctorParameters = function () { return []; };
var ArrayFilterPipe = /** @class */ (function () {
    function ArrayFilterPipe() {
    }
    ArrayFilterPipe.prototype.transform = function (array, args) {
        array = array || [];
        if (typeof args === 'undefined' || args.length !== 2) {
            return array;
        }
        var _a = __read(args, 2), key = _a[0], searchTerm = _a[1];
        if (searchTerm.trim() === '') {
            return array;
        }
        return array.filter(function (item) { return item[key].toString().toLowerCase().search(searchTerm.toLowerCase().trim()) >= 0; });
    };
    return ArrayFilterPipe;
}());
ArrayFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'arrayFilter'
            },] },
];
ArrayFilterPipe.ctorParameters = function () { return []; };
var DualListBoxModule = /** @class */ (function () {
    function DualListBoxModule() {
    }
    DualListBoxModule.forRoot = function () {
        return {
            ngModule: DualListBoxModule
        };
    };
    return DualListBoxModule;
}());
DualListBoxModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule
                ],
                declarations: [
                    ArraySortPipe,
                    ArrayFilterPipe,
                    DualListBoxComponent
                ],
                exports: [
                    ArraySortPipe,
                    ArrayFilterPipe,
                    DualListBoxComponent
                ]
            },] },
];
DualListBoxModule.ctorParameters = function () { return []; };

export { DualListBoxModule, DualListBoxComponent, SortOptions, ArraySortPipe, ArrayFilterPipe };
//# sourceMappingURL=ng2-dual-list-box.js.map
