(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('rxjs/add/operator/debounceTime'), require('rxjs/add/operator/distinctUntilChanged'), require('rxjs/add/operator/map'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', 'rxjs/add/operator/debounceTime', 'rxjs/add/operator/distinctUntilChanged', 'rxjs/add/operator/map', '@angular/common'], factory) :
	(factory((global['ng2-dual-list-box'] = {}),global.ng.core,global.ng.forms,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.common));
}(this, (function (exports,core,forms,debounceTime,distinctUntilChanged,map,common) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */










function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var intersectionwith = require('lodash.intersectionwith');
var differenceWith = require('lodash.differencewith');
var DualListBoxComponent = /** @class */ (function () {
    function DualListBoxComponent(fb) {
        this.fb = fb;
        this.valueField = 'id';
        this.textField = 'name';
        this.debounceTime = 500;
        this.moveAllButton = true;
        this.availableText = 'Available items';
        this.selectedText = 'Selected items';
        this.availableFilterPlaceholder = 'Filter...';
        this.selectedFilterPlaceholder = 'Filter...';
        this.onAvailableItemSelected = new core.EventEmitter();
        this.onSelectedItemsSelected = new core.EventEmitter();
        this.onItemsMoved = new core.EventEmitter();
        this.searchTermAvailable = '';
        this.searchTermSelected = '';
        this.availableItems = [];
        this.selectedItems = [];
        this.availableListBoxControl = new forms.FormControl();
        this.selectedListBoxControl = new forms.FormControl();
        this.availableSearchInputControl = new forms.FormControl();
        this.selectedSearchInputControl = new forms.FormControl();
        this._onChange = function (_) { };
        this._onTouched = function () { };
        this.listBoxForm = this.fb.group({
            availableListBox: this.availableListBoxControl,
            selectedListBox: this.selectedListBoxControl,
            availableSearchInput: this.availableSearchInputControl,
            selectedSearchInput: this.selectedSearchInputControl
        });
    }
    Object.defineProperty(DualListBoxComponent.prototype, "data", {
        set: function (items) {
            var _this = this;
            this.availableItems = __spread((items || []).map(function (item, index) { return ({
                value: item[_this.valueField].toString(),
                text: item[_this.textField]
            }); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualListBoxComponent.prototype, "availableSearch", {
        set: function (searchTerm) {
            this.searchTermAvailable = searchTerm;
            this.availableSearchInputControl.setValue(searchTerm);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualListBoxComponent.prototype, "selectedSearch", {
        set: function (searchTerm) {
            this.searchTermSelected = searchTerm;
            this.selectedSearchInputControl.setValue(searchTerm);
        },
        enumerable: true,
        configurable: true
    });
    DualListBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.availableListBoxControl
            .valueChanges
            .subscribe(function (items) { return _this.onAvailableItemSelected.emit(items); });
        this.selectedListBoxControl
            .valueChanges
            .subscribe(function (items) { return _this.onSelectedItemsSelected.emit(items); });
        this.availableSearchInputControl
            .valueChanges
            .debounceTime(this.debounceTime)
            .distinctUntilChanged()
            .subscribe(function (search) { return _this.searchTermAvailable = search; });
        this.selectedSearchInputControl
            .valueChanges
            .debounceTime(this.debounceTime)
            .distinctUntilChanged()
            .subscribe(function (search) { return _this.searchTermSelected = search; });
    };
    DualListBoxComponent.prototype.moveAllItemsToSelected = function () {
        if (!this.availableItems.length) {
            return;
        }
        this.selectedItems = __spread(this.selectedItems, this.availableItems);
        this.availableItems = [];
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.availableListBoxControl.value,
            from: 'available',
            to: 'selected'
        });
        this.availableListBoxControl.setValue([]);
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveAllItemsToAvailable = function () {
        if (!this.selectedItems.length) {
            return;
        }
        this.availableItems = __spread(this.availableItems, this.selectedItems);
        this.selectedItems = [];
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.selectedListBoxControl.value,
            from: 'selected',
            to: 'available'
        });
        this.selectedListBoxControl.setValue([]);
        this.writeValue([]);
    };
    DualListBoxComponent.prototype.moveMarkedAvailableItemsToSelected = function () {
        this.selectedItems = __spread(this.selectedItems, intersectionwith(this.availableItems, this.availableListBoxControl.value, function (item, value) { return item.value === value; }));
        this.availableItems = __spread(differenceWith(this.availableItems, this.availableListBoxControl.value, function (item, value) { return item.value === value; }));
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.availableListBoxControl.value,
            from: 'available',
            to: 'selected'
        });
        this.availableListBoxControl.setValue([]);
        this.availableSearchInputControl.setValue('');
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveMarkedSelectedItemsToAvailable = function () {
        this.availableItems = __spread(this.availableItems, intersectionwith(this.selectedItems, this.selectedListBoxControl.value, function (item, value) { return item.value === value; }));
        this.selectedItems = __spread(differenceWith(this.selectedItems, this.selectedListBoxControl.value, function (item, value) { return item.value === value; }));
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: this.selectedListBoxControl.value,
            from: 'selected',
            to: 'available'
        });
        this.selectedListBoxControl.setValue([]);
        this.selectedSearchInputControl.setValue('');
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveAvailableItemToSelected = function (item) {
        this.availableItems = this.availableItems.filter(function (listItem) { return listItem.value !== item.value; });
        this.selectedItems = __spread(this.selectedItems, [item]);
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: [item.value],
            from: 'available',
            to: 'selected'
        });
        this.availableSearchInputControl.setValue('');
        this.availableListBoxControl.setValue([]);
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.moveSelectedItemToAvailable = function (item) {
        this.selectedItems = this.selectedItems.filter(function (listItem) { return listItem.value !== item.value; });
        this.availableItems = __spread(this.availableItems, [item]);
        this.onItemsMoved.emit({
            available: this.availableItems,
            selected: this.selectedItems,
            movedItems: [item.value],
            from: 'selected',
            to: 'available'
        });
        this.selectedSearchInputControl.setValue('');
        this.selectedListBoxControl.setValue([]);
        this.writeValue(this.getValues());
    };
    DualListBoxComponent.prototype.trackByValue = function (index, item) {
        return item[this.valueField];
    };
    DualListBoxComponent.prototype.writeValue = function (value) {
        if (this.selectedItems && value && value.length > 0) {
            this.selectedItems = __spread(this.selectedItems, intersectionwith(this.availableItems, value, function (item, val) { return item.value === val; }));
            this.availableItems = __spread(differenceWith(this.availableItems, value, function (item, val) { return item.value === val; }));
        }
        this._onChange(value);
    };
    DualListBoxComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    DualListBoxComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    DualListBoxComponent.prototype.getValues = function () {
        return (this.selectedItems || []).map(function (item) { return item.value; });
    };
    return DualListBoxComponent;
}());
DualListBoxComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ng2-dual-list-box',
                template: "<div class=\"row\" [formGroup]=\"listBoxForm\">\n    <div class=\"col-md-5 col-lg-5 col-sm-12\">\n        <h4 class=\"text-center vertical-spacing-5\">{{availableText}}</h4>\n        <input type=\"text\" class=\"form-control vertical-spacing-5\" placeholder=\"{{availableFilterPlaceholder}}\"\n               formControlName=\"availableSearchInput\" />\n        <select class=\"form-control list-box\" formControlName=\"availableListBox\" multiple>\n            <option *ngFor=\"let item of availableItems | arrayFilter:['text', searchTermAvailable] | arraySort:['text', 'ASC'];trackBy:trackByValue\"\n                    [value]=\"item?.value\"\n                    (dblclick)=\"moveAvailableItemToSelected(item)\">{{item?.text}}</option>\n        </select>\n    </div>\n    <div class=\"col-md-2 col-lg-2 col-sm-12 center-block text-center\">\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 atr top80 sm-spacing\"\n                *ngIf=\"moveAllButton\" (click)=\"moveAllItemsToSelected()\">\n            <span class=\"glyphicon glyphicon-list\"></span>\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 str vertical-spacing-5 sm-spacing\"\n                [disabled]=\"!availableListBoxControl.value?.length\"\n                (click)=\"moveMarkedAvailableItemsToSelected()\">\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 stl vertical-spacing-5 sm-spacing\"\n                [disabled]=\"!selectedListBoxControl.value?.length\"\n                (click)=\"moveMarkedSelectedItemsToAvailable()\">\n            <span class=\"glyphicon glyphicon-chevron-left\"></span>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-default col-md-8 col-md-offset-2 atl bottom10 sm-spacing\"\n                *ngIf=\"moveAllButton\" (click)=\"moveAllItemsToAvailable()\">\n            <span class=\"glyphicon glyphicon-chevron-left\"></span>\n            <span class=\"glyphicon glyphicon-list\"></span>\n        </button>\n    </div>\n    <div class=\"col-md-5 col-lg-5 col-sm-12\">\n        <h4 class=\"text-center vertical-spacing-5\">{{selectedText}}</h4>\n        <input type=\"text\" class=\"form-control vertical-spacing-5\" placeholder=\"{{selectedFilterPlaceholder}}\"\n               formControlName=\"selectedSearchInput\" />\n        <select class=\"form-control list-box\" formControlName=\"selectedListBox\" multiple>\n            <option *ngFor=\"let item of selectedItems | arrayFilter:['text', searchTermSelected] | arraySort:['text', 'ASC'];trackBy:trackByValue\"\n                    [value]=\"item?.value\"\n                    (dblclick)=\"moveSelectedItemToAvailable(item)\">{{item?.text}}</option>\n        </select>\n    </div>\n</div>",
                styles: [".list-box{\n    min-height:200px;\n    width:100%;\n}\n.top100{\n    margin-top:100px;\n}\n.top80{\n    margin-top:80px;\n}\n.bottom10{\n    margin-bottom:10px;\n}\n.vertical-spacing-5{\n    margin-top:5px;\n    margin-bottom:5px;\n}\n.center-block{\n    min-height:50px;\n}\n@media only screen and (max-width : 768px){\n    .sm-spacing{\n        margin-top:10px;\n        margin-bottom:10px;\n    }\n}\n@media only screen and (min-width : 768px) and (max-width : 992px){\n    .sm-spacing{\n        margin-top:10px;\n        margin-bottom:10px;\n    }\n}\n@media only screen and (max-width : 480px){\n    .sm-spacing{\n        margin-top:10px;\n        margin-bottom:10px;\n    }\n}"],
                providers: [{
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return DualListBoxComponent; }),
                        multi: true
                    }]
            },] },
];
DualListBoxComponent.ctorParameters = function () { return [
    { type: forms.FormBuilder, },
]; };
DualListBoxComponent.propDecorators = {
    "data": [{ type: core.Input },],
    "availableSearch": [{ type: core.Input },],
    "selectedSearch": [{ type: core.Input },],
    "valueField": [{ type: core.Input },],
    "textField": [{ type: core.Input },],
    "title": [{ type: core.Input },],
    "debounceTime": [{ type: core.Input },],
    "moveAllButton": [{ type: core.Input },],
    "availableText": [{ type: core.Input },],
    "selectedText": [{ type: core.Input },],
    "availableFilterPlaceholder": [{ type: core.Input },],
    "selectedFilterPlaceholder": [{ type: core.Input },],
    "onAvailableItemSelected": [{ type: core.Output },],
    "onSelectedItemsSelected": [{ type: core.Output },],
    "onItemsMoved": [{ type: core.Output },],
};
var orderby = require('lodash.orderby');
var SortOptions = /** @class */ (function () {
    function SortOptions() {
    }
    return SortOptions;
}());
SortOptions.direction = {
    ASC: 'ASC',
    DESC: 'DESC'
};
var ArraySortPipe = /** @class */ (function () {
    function ArraySortPipe() {
    }
    ArraySortPipe.prototype.transform = function (array, args) {
        array = array || [];
        if (typeof args === 'undefined' || args.length !== 2) {
            return array;
        }
        var _a = __read(args, 2), key = _a[0], direction = _a[1];
        if (direction !== SortOptions.direction.ASC && direction !== SortOptions.direction.DESC) {
            return array;
        }
        return orderby(array, function (item) { return item.hasOwnProperty(key) ? item[key] : item; }, direction.toLowerCase());
    };
    return ArraySortPipe;
}());
ArraySortPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'arraySort'
            },] },
];
ArraySortPipe.ctorParameters = function () { return []; };
var ArrayFilterPipe = /** @class */ (function () {
    function ArrayFilterPipe() {
    }
    ArrayFilterPipe.prototype.transform = function (array, args) {
        array = array || [];
        if (typeof args === 'undefined' || args.length !== 2) {
            return array;
        }
        var _a = __read(args, 2), key = _a[0], searchTerm = _a[1];
        if (searchTerm.trim() === '') {
            return array;
        }
        return array.filter(function (item) { return item[key].toString().toLowerCase().search(searchTerm.toLowerCase().trim()) >= 0; });
    };
    return ArrayFilterPipe;
}());
ArrayFilterPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'arrayFilter'
            },] },
];
ArrayFilterPipe.ctorParameters = function () { return []; };
var DualListBoxModule = /** @class */ (function () {
    function DualListBoxModule() {
    }
    DualListBoxModule.forRoot = function () {
        return {
            ngModule: DualListBoxModule
        };
    };
    return DualListBoxModule;
}());
DualListBoxModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule
                ],
                declarations: [
                    ArraySortPipe,
                    ArrayFilterPipe,
                    DualListBoxComponent
                ],
                exports: [
                    ArraySortPipe,
                    ArrayFilterPipe,
                    DualListBoxComponent
                ]
            },] },
];
DualListBoxModule.ctorParameters = function () { return []; };

exports.DualListBoxModule = DualListBoxModule;
exports.DualListBoxComponent = DualListBoxComponent;
exports.SortOptions = SortOptions;
exports.ArraySortPipe = ArraySortPipe;
exports.ArrayFilterPipe = ArrayFilterPipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng2-dual-list-box.umd.js.map
